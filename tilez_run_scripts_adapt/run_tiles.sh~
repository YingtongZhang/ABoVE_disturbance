#!/bin/bash

echo "Job starting on $HOSTNAME"

## We check to make sure there is an argument to the script - should be one argument for the tile name
if [ -z "$1" ]; then
	echo Usage:  "./run_tiles.sh in_name in_sens"
	## exit script if it doesnt find the arguments
	exit
else
	in_name=$1
fi

if [ -z "$2" ]; then
	echo Usage:  "./run_tiles.sh in_name in_sens"
	## exit script if it doesnt find the arguments
	exit
else
	## in_sens needs to be either LT5 or LE7
	in_sens=$2
fi

## setup output directory

work_dir="/att/nobackup/dsullame/tilez_all_above"
cur_yaml="$work_dir/above_ingest.yaml"
in_dir="/att/nobackup/dsullame/test_mirror"
## a much easier way to search through dirs
all_landsat_dir="/att/pubrepo/LANDSAT/EDC-ESPA/${in_sens}/${in_name}"

echo "Processing $in_sens $in_name files in $in_dir"

temp_name="${in_sens}${in_name}"
echo $temp_name
n=$(find $all_landsat_dir -maxdepth 2 -name ${temp_name}\*.xml | wc -l)
i=1
echo "Found $n images to process"

tot_bands=0

export LC_ALL=en_US.utf-8
export LANG=en_US.utf-8
## this activates the virtual environment i need to run
source $HOME/miniconda3/bin/activate tilezilla

## when we start this environ we lost gdal_data
GDAL_DATA="/opt/gdal-static/share/gdal"

## go into the run directory

cd $work_dir

## export this directory as root
export root=$(readlink -f $(pwd))

for xml_file in $(find $all_landsat_dir -maxdepth 2 -name ${temp_name}\*.xml); do

    # Use AWK to remove .xml
    id=$(basename $xml_file | awk -F '.' '{ print $1 }')
    echo "<----- $i / $n: $id"
    
    ## to get other files
    cur_in_dir=${in_dir}/${id}

    ## new bash routine written by dsm 12/19/16
    process_flag=0
    cur_tiles=`sqlite3 tilezilla.db "select distinct t.id from product p, band b, tile t where b.product_id=p.id and p.timeseries_id='$id' and t.id=p.tile_id;"`
    tile_count=0
    ## will loop through the list of tiles for this id to see if the number of files makes sense
    for t in `echo $cur_tiles`; do
        let "tile_count = $tile_count + 1"
        ## this will be the "friendly names" that exist for that tile and that id
        cur_bands=`sqlite3 tilezilla.db "select b.friendly_name from product p, band b, tile t where b.product_id=p.id and p.timeseries_id='$id' and t.id=$t and t.id=p.tile_id;"`
        ## this will be the number of bands that exist for that tile and id
        num_bands=`sqlite3 tilezilla.db "select count(b.friendly_name) from product p, band b, tile t where b.product_id=p.id and p.timeseries_id='$id' and t.id=$t and t.id=p.tile_id;"`
	band_count=0
	toa_flag=0
	## now we loop through the bands that exist and check to make sure that one of them is toa_band6
	for b in `echo $cur_bands`; do
	    let "band_count = $band_count + 1"
	    if [ $b = "toa_band6" ]; then
	        toa_flag=1
	    fi
	done
	## we have counted the bands that exist for this tile - toa flag is 1 if it exists
	echo "TileID $t for $id has $num_bands bands and toa_flag is $toa_flag"

	## now we check whether we need to process this tile - if the number of bands is less than 8
	if [ $num_bands -ne "8" ]; then
	    process_flag=1
	    ## a caveat exists if the number of bands is 1 and it is the toa band - sometimes the toa band is larger in extent than the other files
	    if [ $toa_flag == "1" -a $num_bands == "1" ]; then
	        process_flag=0
	    fi
	fi
    done  ## finished whole tile search

    if [ $process_flag -eq "1" ]; then
	echo "Will process this scene"
	echo "tilez -C $cur_yaml ingest $cur_in_dir*"
       # tilez -C $cur_yaml ingest $cur_in_dir*
        echo "Finished tiling ${id}"
    else
	echo "Scene has been processed and ingested"
    fi

    ## iterate counter of tiles that have been processed
    let i+=1
done

source deactivate
echo "Done with all files"
